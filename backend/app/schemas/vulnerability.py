"""
Vulnerability schemas
"""

from pydantic import BaseModel, HttpUrl, validator, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
from decimal import Decimal

from app.models.vulnerability import VulnerabilitySeverity, VulnerabilityStatus


class VulnerabilityCreateRequest(BaseModel):
    scan_id: str = Field(..., description="ID do scan relacionado")
    vulnerability_id: str = Field(..., description="ID interno da vulnerabilidade")
    cve_id: Optional[str] = Field(None, description="Identificador CVE")
    
    # Severity and scoring
    severity: VulnerabilitySeverity = Field(..., description="Severidade da vulnerabilidade")
    cvss_score: Optional[Decimal] = Field(None, ge=0.0, le=10.0)
    cvss_vector: Optional[str] = None
    
    # Vulnerability details
    title: str = Field(..., max_length=500, description="Título da vulnerabilidade")
    description: str = Field(..., description="Descrição detalhada")
    solution: Optional[str] = None
    references: List[str] = Field(default_factory=list)
    
    # Location and context
    affected_url: str = Field(..., max_length=500)
    affected_component: Optional[str] = None
    affected_parameter: Optional[str] = None
    
    # Technical details
    vulnerability_type: Optional[str] = None
    attack_vector: Optional[str] = None
    attack_complexity: Optional[str] = None
    
    # Evidence
    evidence: Dict[str, Any] = Field(default_factory=dict)
    proof_of_concept: Optional[str] = None


class VulnerabilityResponse(BaseModel):
    id: str
    scan_id: str
    vulnerability_id: str
    cve_id: Optional[str] = None
    
    # Severity and scoring
    severity: VulnerabilitySeverity
    cvss_score: Optional[Decimal] = None
    cvss_base_score: Optional[Decimal] = None
    cvss_temporal_score: Optional[Decimal] = None
    cvss_environmental_score: Optional[Decimal] = None
    cvss_vector: Optional[str] = None
    
    # Vulnerability details
    title: str
    description: str
    solution: Optional[str] = None
    references: List[str] = Field(default_factory=list)
    
    # Location and context
    affected_url: str
    affected_component: Optional[str] = None
    affected_parameter: Optional[str] = None
    
    # Technical details
    vulnerability_type: Optional[str] = None
    attack_vector: Optional[str] = None
    attack_complexity: Optional[str] = None
    privileges_required: Optional[str] = None
    user_interaction_required: bool = False
    scope_changed: bool = False
    
    # Network and access
    network_accessible: bool = False
    internet_facing: bool = False
    authentication_required: bool = True
    
    # Exploit information
    exploit_available: bool = False
    exploit_maturity: Optional[str] = None
    exploit_urls: List[str] = Field(default_factory=list)
    
    # Patch information
    patch_available: bool = False
    patch_urls: List[str] = Field(default_factory=list)
    days_since_disclosure: Optional[int] = None
    days_since_patch: Optional[int] = None
    vendor_advisory_urls: List[str] = Field(default_factory=list)
    
    # Asset and business context
    asset_criticality: Optional[Decimal] = None
    business_impact: Optional[str] = None
    
    # Evidence and proof
    evidence: Dict[str, Any] = Field(default_factory=dict)
    proof_of_concept: Optional[str] = None
    
    # Remediation tracking
    status: VulnerabilityStatus
    remediation_notes: Optional[str] = None
    remediation_priority: Optional[int] = None
    assigned_to: Optional[str] = None
    due_date: Optional[datetime] = None
    
    # User feedback and validation
    is_false_positive: bool = False
    user_feedback: Optional[str] = None
    verified_by: Optional[str] = None
    verified_at: Optional[datetime] = None
    
    # Machine learning features
    ml_confidence: Optional[Decimal] = None
    ml_risk_score: Optional[Decimal] = None
    
    # Computed properties
    severity_weight: float = 0.0
    is_critical: bool = False
    is_exploitable: bool = False
    risk_level: str = "Info"
    remediation_urgency: int = 5
    
    # Timestamps
    created_at: datetime
    updated_at: datetime
    
    class Config:
        from_attributes = True


class VulnerabilityListResponse(BaseModel):
    vulnerabilities: List[VulnerabilityResponse]
    total: int
    page: int
    per_page: int
    has_next: bool
    has_prev: bool
    
    # Filters and aggregations
    severity_counts: Dict[str, int] = Field(default_factory=dict)
    status_counts: Dict[str, int] = Field(default_factory=dict)
    type_counts: Dict[str, int] = Field(default_factory=dict)


class VulnerabilityUpdateRequest(BaseModel):
    status: Optional[VulnerabilityStatus] = None
    remediation_notes: Optional[str] = None
    remediation_priority: Optional[int] = Field(None, ge=1, le=5)
    assigned_to: Optional[str] = None
    due_date: Optional[datetime] = None
    is_false_positive: Optional[bool] = None
    user_feedback: Optional[str] = None


class VulnerabilityStatsResponse(BaseModel):
    total_vulnerabilities: int
    by_severity: Dict[str, int]
    by_status: Dict[str, int]
    by_type: Dict[str, int]
    critical_open: int
    high_open: int
    avg_cvss_score: float
    exploitable_count: int
    false_positive_rate: float
    remediation_stats: Dict[str, Any]


class VulnerabilityExportRequest(BaseModel):
    scan_ids: Optional[List[str]] = None
    severity_filter: Optional[List[VulnerabilitySeverity]] = None
    status_filter: Optional[List[VulnerabilityStatus]] = None
    date_from: Optional[datetime] = None
    date_to: Optional[datetime] = None
    format: str = Field(default="json", pattern="^(json|csv|pdf|xml)$")


class FalsePositiveRequest(BaseModel):
    reason: str = Field(..., min_length=10, description="Razão para marcar como falso positivo")


class RemediationRequest(BaseModel):
    notes: str = Field(..., min_length=5, description="Notas sobre a correção")
    verification_method: Optional[str] = None